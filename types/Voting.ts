/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVotes"
      | "listCandidates"
      | "owner"
      | "resetVotes"
      | "vote"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Voted" | "VotesReset"): EventFragment;

  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resetVotes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [string]): string;

  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace VotedEvent {
  export type InputTuple = [
    voter: AddressLike,
    candidate: string,
    newCount: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    candidate: string,
    newCount: bigint
  ];
  export interface OutputObject {
    voter: string;
    candidate: string;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotesResetEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVotes: TypedContractMethod<[candidate: string], [bigint], "view">;

  listCandidates: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  resetVotes: TypedContractMethod<[], [void], "nonpayable">;

  vote: TypedContractMethod<[candidate: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[candidate: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "listCandidates"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resetVotes"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[candidate: string], [void], "nonpayable">;

  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotesReset"
  ): TypedContractEvent<
    VotesResetEvent.InputTuple,
    VotesResetEvent.OutputTuple,
    VotesResetEvent.OutputObject
  >;

  filters: {
    "Voted(address,string,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotesReset(address)": TypedContractEvent<
      VotesResetEvent.InputTuple,
      VotesResetEvent.OutputTuple,
      VotesResetEvent.OutputObject
    >;
    VotesReset: TypedContractEvent<
      VotesResetEvent.InputTuple,
      VotesResetEvent.OutputTuple,
      VotesResetEvent.OutputObject
    >;
  };
}
